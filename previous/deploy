#!/usr/bin/env php
<?php
/*
set 'foo bar' '123'
~in file flag
# php function
*another command group
cli command group
*/

$hard_actions = [
	'self-update'=>'self_update',
	'selfupdate'=>'self_update',
	'create-project'=>'install',
];

heading('Deploy Version 1.1');

if (isset($_SERVER['argv'][1])) {
	foreach ($hard_actions as $command=>$function) {
		if (strtolower($_SERVER['argv'][1]) == $command) {
			call_user_func($function);
			exit();
		}
	}
}

main();

function main() {
	global $hard_actions;
	
	chdir($_SERVER['PWD']);
	
	define('ROOTPATH',realpath($_SERVER['PWD']));
	define('ESCROOTPATH',str_replace(' ','\ ',ROOTPATH));
	
	$_internal = [];
	
	if (!file_exists(ROOTPATH.'/deploy.json')) {
		$txt = 'Could not locate deploy.json file';
	
		e('<red>'.str_pad('*'.$txt,exec('tput cols'),'*',STR_PAD_RIGHT).'</red>');
		e('<cyan>Global Actions Available</cyan>');
		$html = array_keys($hard_actions);
		
		sort($html);
		
		e(implode(', ',$html));
		exit();
	}
	
	if (!file_exists(ROOTPATH.'/.env')) {
		error('Could not locate .env file');
	}
	
	heading('Using ENV File '.ROOTPATH.'/.env');
	
	$_ENV = $_ENV + require ROOTPATH.'/.env';
	
	$build_filename = ROOTPATH.'/deploy.json';
	
	heading('Using Build File '.$build_filename);
	
	if (file_exists($build_filename)) {
		$build_obj = json_decode(file_get_contents($build_filename));
	
		if ($build_obj === null) {
			error('build.json malformed');
		}
		
		$build_ary = (array)$build_obj;
	} else {
		error('Can not locate build.json as "'.$build_filename.'"');
	}
	
	/* get option */
	$args = $_SERVER['argv'];
	array_shift($args);
	$option = trim(implode(' ',$args));
	$options = array_keys($build_ary);
	
	if (!in_array($option,$options)) {
		if (empty($option)) {
			e('Please provide an option');
		} else {
			e('Option "'.$option.'" not found');
		}
		
		$html = [];
		
		foreach ($options as $h) {
			$x = strtolower(substr($h,0,1));
		
			if (ord($x) >= 97 && ord($x) <= 122) {
				$html[] = $h;
			}
		}
		
		
		$html = array_merge($html,array_keys($hard_actions));
		
		sort($html);
		
		e(implode(', ',$html));
		exit();
	}
	
	if ($build_ary['~sudo'] === true) {
		passthru('sudo echo');
		define('SUDO','sudo ');
	} else {
		define('SUDO','');
	}
	
	run($build_ary[$option]);
}

function run($commands) {
	global $build_ary;

	foreach ($commands as $cli) {
		merge($cli);
				
		if (substr($cli,0,4) == 'set ') {
			/* set merge field */
			$cli = substr($cli,4);
			$args = str_getcsv($cli,' ',"'");
	
			$_internal[$args[0]] = $args[1];
		} elseif(substr($cli,0,1) == '*') {
			/* another group */
			$option = substr($cli,1);
		
			$options = array_keys($build_ary);
			
			if (!in_array($option,$options)) {
				error('Option "'.$option.'" not found'.chr(10).implode(', ',$options));
			}
		
			run($build_ary[$option]);
		} elseif(substr($cli,0,1) == '#') {
			/* php function */
			$function = get_function(substr($cli,1));
			$args = get_cli(substr($cli,1));
			
			call_user_func_array($function,$args);
		} else {
			/* direct cli */
			e('<off>'.SUDO.$cli);

			passthru(SUDO.$cli,$exit_code);
			
			if ($exit_code > 0) {
				break;
			}
		}
	}
}

function show_git_repros($path) {
	exec('find '.$path.' -name FETCH_HEAD',$output);
	
	foreach ($output as $o) {
		e(str_replace(ROOTPATH,'{erootpath}',dirname(dirname($o))));
	}
}

function get_function($cli) {
	$parts = explode(' ',$cli);

	return array_shift($parts);
}

function get_cli($cli) {
	$function = get_function($cli);

	$cli = substr($cli,strlen($function)+1);

	$cli = str_replace('\ ',chr(9),$cli);

	$args = str_getcsv($cli,' ',"'");

	foreach ($args as $idx=>$val) {
		$args[$idx] = str_replace(chr(9),'\ ',$val);
	}

	return $args;
}

function e($txt) {
	echo color($txt).chr(10);
}

function heading($txt,$pad='-') {
	e('<cyan>'.str_pad('-'.$txt,exec('tput cols'),'-',STR_PAD_RIGHT).'</cyan>');
}

function error($txt) {
	e('<red>'.str_pad('*'.$txt,exec('tput cols'),'*',STR_PAD_RIGHT).'</red>');
	
	exit(6);
}

function table_heading() {
	global $column_widths;

	$input = func_get_args()[0];
	$text = '';

	foreach ($input as $txt=>$val) {
		$text .= str_pad($txt,$val,' ',STR_PAD_RIGHT).' ';
		
		$column_widths[] = $val;
	}
	
	e('<yellow>'.$text.'</yellow>');
}

function table_columns() {
	global $column_widths;

	$input = func_get_args();
	$text = '';

	foreach ($input as $idx=>$val) {
		$text .= str_pad($val,$column_widths[$idx],' ',STR_PAD_RIGHT).' ';
	}

	e($text);
}

function merge(&$input) {
	global $_internal;

	foreach ($_ENV as $key=>$val) {
		$input = str_replace('{'.strtolower($key).'}',$val,$input);
	}
	
	$input = str_replace(['{rootpath}','{erootpath}','{filename_date}'],[ROOTPATH,ESCROOTPATH,date('Y-m-d-H:ia')],$input);

	foreach ((array)$_internal as $key=>$val) {
		$input = str_replace('{'.strtolower($key).'}',$val,$input);
	}
}

function git_update($path,$branch=null) {
	$branch = ($branch) ? $branch : $_ENV['GITBRANCH'];

	if (!file_exists($path.'/.git')) {
		e('<red>Not a git folder '.$path.'</off>');
	} else {
		passthru('cd '.$path.';git fetch --all;git reset --hard origin/'.$branch);
	}
}

function s($input) {
	return str_replace(' ','\ ',$input);
}

function git_status($path) {
	exec('find '.$path.' -name FETCH_HEAD',$output);
	
	table_heading(['Package'=>32,'Branch'=>16,'Hash'=>42]);
	
	foreach ($output as $o) {
		$dirname = dirname(dirname($o));
	
		$branch = exec("cd ".s($dirname).";git rev-parse --abbrev-ref HEAD");
		$hash = exec("cd ".s($dirname).";git rev-parse --verify HEAD");
		
		$sections = explode('/',$dirname);
		$package = end($sections);
	
		table_columns($package,$branch,$hash);
	}
}

function color($input) {
	// Set up shell colors
	$foreground_colors['off'] = '0;0';
	
	$foreground_colors['black'] = '0;30';
	$foreground_colors['dark_gray'] = '1;30';
	$foreground_colors['blue'] = '0;34';
	$foreground_colors['light_blue'] = '1;34';
	$foreground_colors['green'] = '0;32';
	$foreground_colors['light_green'] = '1;32';
	$foreground_colors['cyan'] = '0;36';
	$foreground_colors['light_cyan'] = '1;36';
	$foreground_colors['red'] = '0;31';
	$foreground_colors['light_red'] = '1;31';
	$foreground_colors['purple'] = '0;35';
	$foreground_colors['light_purple'] = '1;35';
	$foreground_colors['brown'] = '0;33';
	$foreground_colors['yellow'] = '1;33';
	$foreground_colors['light_gray'] = '0;37';
	$foreground_colors['white'] = '1;37';
	
	foreach ($foreground_colors as $color=>$console) {
		$input = str_replace('<'.$color.'>',"\033[".$console."m",$input);
		$input = str_replace('</'.$color.'>',"\033[0m",$input);
	}
	
	return $input;
}

function self_update() {
	heading('Updating Self');

	passthru('rm -fdr /tmp/deploy;git clone https://github.com/dmyers2004/deploy.git /tmp/deploy;mv /tmp/deploy/deploy "'.__FILE__.'";chmod 755 "'.__FILE__.'"');

	heading('Update Complete');
	exit();
}

function install() {
	chdir($_SERVER['PWD']);

	if (!isset($_SERVER['argv'][2])) {
		error('Please provide a folder name');
	}
	
	$folder = $_SERVER['PWD'].'/'.$_SERVER['argv'][2];
	
	if (file_exists($folder)) {
		error('Folder already exists');
	}
	
	heading('Create Folder');
	
	@mkdir($folder,0777,true);
	
	chdir($folder);
	
	heading('Copy Repository');
	
	passthru("cd ".str_replace(' ','\ ',$folder).";composer require codeigniter/framework");
	
	heading('Make Directories');
	
	/* create folders */
	@mkdir('public');
	@mkdir('public/assets');
	@mkdir('public/theme');
	@mkdir('application');
	@mkdir('support');
	@mkdir('support/migrations');
	@mkdir('support/misc');
	@mkdir('support/backups');
	@mkdir('support/import');
	@mkdir('packages');
	@mkdir('var');
	@mkdir('var/logs');
	@mkdir('var/cache');
	@mkdir('var/downloads');
	@mkdir('var/uploads');
	@mkdir('var/emails');
	@mkdir('var/sessions');
	
	heading('Create Needed Files');
	
	file_put_contents('.env',env_content());
	file_put_contents('deploy.json',deploy_content());
	file_put_contents('public/.htaccess',htaccess_content());
	
	/* copy application */
	heading('Copy Application to Application');
	
	copyr($folder.'/vendor/codeigniter/framework/application',$folder.'/application');
	
	heading('Remove index.html from Application');
	
	/* remove index.html */
	$dir = new RecursiveDirectoryIterator($folder.'/application');
	$ite = new RecursiveIteratorIterator($dir);
	
	foreach($ite as $file) {
		if ($file->getBasename() == 'index.html' || $file->getBasename() == '.DS_Store') {
			unlink($file->getRealPath());
		}
	}
	
	/* move index.php to public */
	
	heading('Copy Index to Index');
	
	copy($folder.'/vendor/codeigniter/framework/index.php',$folder.'/public/index.php');
	
	$content = file_get_contents('public/index.php');
	
	$content = str_replace("require_once BASEPATH.'core/CodeIgniter.php';","require_once ORANGEPATH.'/core/Orange.php';",$content);
	$content = str_replace("\$system_path = 'system';","\$system_path = '../vendor/codeigniter/framework/system';",$content);
	$content = str_replace("\$application_folder = 'application';","\$application_folder = '../application';",$content);
	$content = str_replace("define('ENVIRONMENT', isset(\$_SERVER['CI_ENV']) ? \$_SERVER['CI_ENV'] : 'development');",index_content(),$content);
	$content = str_replace("error_reporting(-1);","error_reporting(E_ALL & ~E_NOTICE);",$content);
	
	file_put_contents('public/index.php',$content);
	
	$content = file_get_contents('application/config/config.php');
	
	$content = str_replace("\$config['base_url'] = '';","\$config['base_url'] = env('DOMAIN');",$content);
	$content = str_replace("\$config['index_page'] = 'index.php';","\$config['index_page'] = '';",$content);
	$content = str_replace("\$config['composer_autoload'] = FALSE;","\$config['composer_autoload'] = ROOTPATH.'/vendor/autoload.php';",$content);
	$content = str_replace("\$config['log_threshold'] = 0;","\$config['log_threshold'] =  env('LOG_THRESHOLD',0);",$content);
	$content = str_replace("\$config['log_path'] = '';","\$config['log_path'] = ROOTPATH.'/var/logs/';",$content);
	$content = str_replace("\$config['log_file_extension'] = '';","\$config['log_file_extension'] = 'log';",$content);
	$content = str_replace("\$config['cache_path'] = '';","\$config['cache_path'] = ROOTPATH.'/var/cache/';",$content);
	$content = str_replace("\$config['cache_path'] = '';","\$config['cache_path'] = ROOTPATH.'/var/cache/';\n\$config['cache_default'] = env('config.cache_default','dummy');\n\$config['cache_backup'] = 'dummy';\n\$config['cache_ttl'] = env('config.cache_ttl',0);",$content);
	$content = str_replace("\$config['sess_save_path'] = NULL;","\$config['sess_save_path'] = ROOTPATH.'/var/sessions/';",$content);
	$content = str_replace("\$config['encryption_key'] = '';","\$config['encryption_key'] = env('encryption_key');",$content);
	
	file_put_contents('application/config/config.php',$content);
	
	heading('Remove unneeded folders');
	
	/* remove application folders */
	unlink($folder.'/application/config/hooks.php');
	unlink($folder.'/application/config/smileys.php');
	
	rmdir($folder.'/application/cache');
	rmdir($folder.'/application/core');
	rmdir($folder.'/application/hooks');
	rmdir($folder.'/application/logs');
	rmdir($folder.'/application/language/english');
	rmdir($folder.'/application/language');
	rmdir($folder.'/application/third_party');
}

function copyr($source, $dest) {
    if(is_dir($source)) {
        $dir_handle=opendir($source);
        while($file=readdir($dir_handle)){
            if($file!="." && $file!=".."){
                if(is_dir($source."/".$file)){
                    if(!is_dir($dest."/".$file)){
                        mkdir($dest."/".$file);
                    }
                    copyr($source."/".$file, $dest."/".$file);
                } else {
                    copy($source."/".$file, $dest."/".$file);
                }
            }
        }
        closedir($dir_handle);
    } else {
        copy($source, $dest);
    }
}

function rmdirr($dirname) {
	if (!file_exists($dirname)) return false;
	if (is_file($dirname) || is_link($dirname)) return unlink($dirname);

	$dir = dir($dirname);
	while (false !== $entry = $dir->read()) {
		if ($entry == '.' || $entry == '..') continue;
		rmdirr($dirname . DIRECTORY_SEPARATOR . $entry);
	}

	$dir->close();
	return rmdir($dirname);
}

function deploy_content() {
return <<<EOF
{}
EOF;
}

function env_content() {
	$md5 = md5(microtime());

return <<<EOF
<?php

return [
	'SERVER_ENVIRONMENT'=>'development', /* development, testing, production */
	'SERVER_DEBUG'=>'development', /* development, testing, production */
	'LOG_THRESHOLD'=>0,
	'ACTIVE DATABASE GROUP'=>'local', /* default database group */
	'DOMAIN'=>null, /* the domain of this box */

	'database.debug'=>true,

	'config.cache_default'=>'dummy',
	'config.cache_ttl'=>0,
	
	'encryption_key'=>'$md5',
];
EOF;
}

function htaccess_content() {
return <<<EOF
Options +FollowSymLinks

RewriteEngine On

RewriteBase /

RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d

RewriteRule ^(.*)$ index.php/$1 [L]
EOF;
}

function index_content() {
return <<<EOF
/* absolute path to projects root level - nothing is stored below this */
define('ROOTPATH', realpath(__DIR__.'/../'));

/* .env file */
if (!file_exists(ROOTPATH.'/.env')) {
	die('.env file missing');
}

/* bring in the system _env files */
\$_ENV = \$_ENV + require ROOTPATH.'/.env';

define('ENVIRONMENT',\$_ENV['SERVER_ENVIRONMENT']);

/* absolute path to project orange box folder? */
define('ORANGEPATH', ROOTPATH.'/packages/projectorangebox/orange');

/* absolute path to WWW folder */
define('WWW', dirname(__FILE__));
EOF;
}
