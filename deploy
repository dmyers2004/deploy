#!/usr/bin/env php
<?php
/*
Deploy Script

@author Don Myers
@copyright 2018
@license http://opensource.org/licenses/MIT MIT License
@link https://github.com/dmyers2004/deploy
@version 2.0

Using the Prefix of:

#    - run a callable function in the Callable_functions class
*    - run another deploy group
none - Command line command

included functions include
set name value
sudo (on|off)
git_status (path)
git_update (path|branch)
show_git_repros (path)
self_update()
create_package(folder name)

*/

ini_set('memory_limit','512M');
ini_set('display_errors', 1);
error_reporting(E_ALL ^ E_NOTICE);

$o = new stdclass();

o()->tools = new Tools;
o()->callable = new Callable_functions;
o()->eof = new Eof;

o()->tools->heading('Deploy Version 2.0');

chdir($_SERVER['PWD']);

define('ROOTPATH',realpath($_SERVER['PWD']));
define('ESCROOTPATH',str_replace(' ','\ ',ROOTPATH));

/* actions in the deploy file */
$soft_actions_c = o()->tools->get_deploy();
$soft_actions = ($soft_actions_c) ? array_keys($soft_actions_c) : [];

$hard_actions_c = o()->tools->get_hard_actions();
$hard_actions = ($hard_actions_c) ? array_keys($hard_actions_c) : [];

$actions = array_merge($hard_actions,$soft_actions);
$complete = array_merge($hard_actions_c,$soft_actions_c);

/* get option */
$args = $_SERVER['argv'];

/* shift of the script */
array_shift($args);

/* put them back together */
$option = trim(implode(' ',$args));

usort($actions,function($a,$b){
	return strlen($b)-strlen($a);
});

foreach ($actions as $a) {
	if (strtolower(substr($option,0,strlen($a))) == strtolower($a)) {
		/* we got a match! */
		$arg1 = strtolower(substr($option,0,strlen($a)));
		$arg2 = trim(substr($option,strlen($arg1)));
		
		o()->tools->complete($complete)->run($arg1,$arg2);
		exit(1);
	}
}

/* else show all the available options for where I am at */

sort($actions);

$length = 0;

$descriptions = o()->tools->get_descriptions($complete,$length);

o()->tools->e('<orange>Available commands:</orange>');

foreach ($actions as $a) {
	$c = strtolower(substr($a,0,1));
	
	if (ord($c) >= 97 && ord($c) <= 122) {
		o()->tools->e('<green>'.str_pad($a,$length).'</green>'.$descriptions[$a]);
	}
}

exit(1);

function o() {
	/* bring the global scope variable into local scope */
	global $o;

	/* return it */
	return $o;
}

class Callable_functions {
	public function set($name,$value) {
		o()->tools->e("set $name to $value");
		
		o()->tools->set($name,$value);
	}

	public function git_status($path) {
		exec('find '.$path.' -name FETCH_HEAD',$output);
		
		o()->tools->table_heading(['Package'=>32,'Branch'=>16,'Hash'=>42]);
		
		foreach ($output as $o) {
			$dirname = dirname(dirname($o));
		
			$branch = exec("cd ".s($dirname).";git rev-parse --abbrev-ref HEAD");
			$hash = exec("cd ".s($dirname).";git rev-parse --verify HEAD");
			
			$sections = explode('/',$dirname);
			$package = end($sections);
		
			o()->tools->table_columns($package,$branch,$hash);
		}
	}

	public function git_update($path,$branch=null) {
		$branch = ($branch) ? $branch : $_ENV['GITBRANCH'];
	
		if (!file_exists($path.'/.git')) {
			o()->tools->e('<red>Not a git folder '.$path.'</off>');
		} else {
			passthru('cd '.$path.';git fetch --all;git reset --hard origin/'.$branch);
		}
	}
	
	public function show_git_repros($path) {
		exec('find '.$path.' -name FETCH_HEAD',$output);
		
		foreach ($output as $o) {
			o()->tools->e(str_replace(ROOTPATH,'{erootpath}',dirname(dirname($o))));
		}
	}

	public function sudo($on) {
		o()->tools->e("sudo $on");

		if ($on == 'on') {
			if (!o()->tools->sudo_setup) {
				passthru('sudo touch -c foo');
			}
			
			o()->tools->sudo = 'sudo ';
		} else {
			o()->tools->sudo = '';
		}
	}

	public function self_update() {
		o()->tools->heading('Updating Self');
	
		passthru('rm -fdr /tmp/deploy;git clone https://github.com/dmyers2004/deploy.git /tmp/deploy;mv /tmp/deploy/deploy "'.__FILE__.'";chmod 755 "'.__FILE__.'"');
	
		o()->tools->heading('Update Complete');
	}

	public function create_package($folder='') {
		if (empty($folder)) {
			o()->tools->error('Please provide a folder name');
		}
		
		$folder = $_SERVER['PWD'].'/'.$folder;
		
		if (file_exists($folder)) {
			o()->tools->error('Folder already exists');
		}
		
		o()->tools->heading('Create Folder');
		
		@mkdir($folder,0777,true);
		
		chdir($folder);
		
		o()->tools->heading('Copy Repository');
		
		passthru("cd ".str_replace(' ','\ ',$folder).";composer require codeigniter/framework");
		
		o()->tools->heading('Make Directories');
		
		/* create folders */
		@mkdir('public');
		@mkdir('public/assets');
		@mkdir('public/theme');
		@mkdir('application');
		@mkdir('support');
		@mkdir('support/migrations');
		@mkdir('support/misc');
		@mkdir('support/backups');
		@mkdir('support/import');
		@mkdir('packages');
		@mkdir('var');
		@mkdir('var/logs');
		@mkdir('var/cache');
		@mkdir('var/downloads');
		@mkdir('var/uploads');
		@mkdir('var/emails');
		@mkdir('var/sessions');
		
		o()->tools->heading('Create Needed Files');
		
		file_put_contents('.env',o()->eof->env());
		file_put_contents('deploy.json','{}');
		file_put_contents('public/.htaccess',o()->eof->htaccess());
		
		/* copy application */
		o()->tools->heading('Copy Application to Application');
		
		o()->tools->copyr($folder.'/vendor/codeigniter/framework/application',$folder.'/application');
		
		o()->tools->heading('Remove index.html from Application');
		
		/* remove index.html */
		$dir = new RecursiveDirectoryIterator($folder.'/application');
		$ite = new RecursiveIteratorIterator($dir);
		
		foreach($ite as $file) {
			if ($file->getBasename() == 'index.html' || $file->getBasename() == '.DS_Store') {
				unlink($file->getRealPath());
			}
		}
		
		/* move index.php to public */
		
		o()->tools->heading('Copy Index to Index');
		
		copy($folder.'/vendor/codeigniter/framework/index.php',$folder.'/public/index.php');
		
		$content = file_get_contents('public/index.php');
		
		$content = str_replace("require_once BASEPATH.'core/CodeIgniter.php';","require_once ORANGEPATH.'/core/Orange.php';",$content);
		$content = str_replace("\$system_path = 'system';","\$system_path = '../vendor/codeigniter/framework/system';",$content);
		$content = str_replace("\$application_folder = 'application';","\$application_folder = '../application';",$content);
		$content = str_replace("define('ENVIRONMENT', isset(\$_SERVER['CI_ENV']) ? \$_SERVER['CI_ENV'] : 'development');",o()->eof->index_addon(),$content);
		$content = str_replace("error_reporting(-1);","error_reporting(E_ALL & ~E_NOTICE);",$content);
		
		file_put_contents('public/index.php',$content);
		
		$content = file_get_contents('application/config/config.php');
		
		$content = str_replace("\$config['base_url'] = '';","\$config['base_url'] = env('DOMAIN');",$content);
		$content = str_replace("\$config['index_page'] = 'index.php';","\$config['index_page'] = '';",$content);
		$content = str_replace("\$config['composer_autoload'] = FALSE;","\$config['composer_autoload'] = ROOTPATH.'/vendor/autoload.php';",$content);
		$content = str_replace("\$config['log_threshold'] = 0;","\$config['log_threshold'] =  env('LOG_THRESHOLD',0);",$content);
		$content = str_replace("\$config['log_path'] = '';","\$config['log_path'] = ROOTPATH.'/var/logs/';",$content);
		$content = str_replace("\$config['log_file_extension'] = '';","\$config['log_file_extension'] = 'log';",$content);
		$content = str_replace("\$config['cache_path'] = '';","\$config['cache_path'] = ROOTPATH.'/var/cache/';",$content);
		$content = str_replace("\$config['cache_path'] = '';","\$config['cache_path'] = ROOTPATH.'/var/cache/';\n\$config['cache_default'] = env('config.cache_default','dummy');\n\$config['cache_backup'] = 'dummy';\n\$config['cache_ttl'] = env('config.cache_ttl',0);",$content);
		$content = str_replace("\$config['sess_save_path'] = NULL;","\$config['sess_save_path'] = ROOTPATH.'/var/sessions/';",$content);
		$content = str_replace("\$config['encryption_key'] = '';","\$config['encryption_key'] = env('encryption_key');",$content);
		
		file_put_contents('application/config/config.php',$content);
		
		o()->tools->heading('Remove unneeded folders');
		
		/* remove application folders */
		unlink($folder.'/application/config/hooks.php');
		unlink($folder.'/application/config/smileys.php');
		
		o()->tools->rmdir($folder.'/application/cache');
		o()->tools->rmdir($folder.'/application/core');
		o()->tools->rmdir($folder.'/application/hooks');
		o()->tools->rmdir($folder.'/application/logs');
		o()->tools->rmdir($folder.'/application/language/english');
		o()->tools->rmdir($folder.'/application/language');
		o()->tools->rmdir($folder.'/application/third_party');
	}

} /* end class */

class Tools {
	public $sudo_setup = false;
	public $sudo = '';
	public $column_widths = [];
	public $_internal;
	public $complete;

	public function set($name,$value) {
		$this->_internal[$name] = $value;
	}

	public function complete($complete) {
		$this->complete = $complete;
	
		return $this;
	}

	public function copyr($source, $dest) {
		if (is_dir($source)) {
			$dir_handle = opendir($source);
			
			while ($file=readdir($dir_handle)) {
				if ($file!="." && $file!="..") {
					if (is_dir($source."/".$file)) {
						if (!is_dir($dest."/".$file)) {
							mkdir($dest."/".$file);
						}
						
						$this->copyr($source."/".$file, $dest."/".$file);
					} else {
						copy($source."/".$file, $dest."/".$file);
					}
				}
			}
			
			closedir($dir_handle);
		} else {
			copy($source, $dest);
		}
	}

	public function rmdirr($dirname) {
		if (!file_exists($dirname)) {
			return false;
		}
		
		if (is_file($dirname) || is_link($dirname)) {
			return unlink($dirname);
		}
	
		$dir = dir($dirname);
		
		while (false !== $entry = $dir->read()) {
			if ($entry == '.' || $entry == '..') {
				continue;
			}
			
			$this->rmdirr($dirname . DIRECTORY_SEPARATOR . $entry);
		}
	
		$dir->close();
		
		return rmdir($dirname);
	}

	public function run($arg1,$arg2) {
		if (!isset($this->complete[$arg1])) {
			$this->error("Grouping $arg1 Not Found.");
		}
	
		$commands = $this->complete[$arg1];
		
		foreach ($commands as $cli) {
			$one = substr($cli,0,1);
			
			$this->merge($cli);
			
			if ($one == '%') {
				/* description do nothing */
			} elseif($one == '*') {
				/* another group */
				$this->run(substr($cli,1),'');
			} elseif($one == '#') {
				/* php function */
				$function = $this->get_function(substr($cli,1));
				$args = $this->get_cli(substr($cli,1));
				
				if (!method_exists(o()->callable,$function)) {
					$this->errors("Callable Function $function Not Found.");
				}
				
				call_user_func_array([o()->callable,$function],$args);
			} else {
				/* direct cli */
				$this->e('<off>'.$this->sudo.$cli);
	
				passthru($this->sudo.$cli,$exit_code);
				
				if ($exit_code > 0) {
					break;
				}
			}
		}
	}
	
	public function get_function($cli) {
		$parts = explode(' ',$cli);
	
		return array_shift($parts);
	}
	
	public function get_cli($cli) {
		$function = $this->get_function($cli);
	
		$cli = substr($cli,strlen($function)+1);
	
		$cli = str_replace('\ ',chr(9),$cli);
	
		$args = str_getcsv($cli,' ',"'");
	
		foreach ($args as $idx=>$val) {
			$args[$idx] = str_replace(chr(9),'\ ',$val);
		}
	
		return $args;
	}
	
	public function e($txt) {
		echo $this->color($txt).chr(10);
	}
	
	public function heading($txt,$pad='-') {
		$this->e('<cyan>'.str_pad('- '.$txt.' ',exec('tput cols'),'-',STR_PAD_RIGHT).'</cyan>');
	}
	
	public function error($txt,$exit=true) {
		$this->e('<red>'.str_pad('* '.$txt.' ',exec('tput cols'),'*',STR_PAD_RIGHT).'</red>');
		
		if ($exit) {
			exit(6);
		}
	}
	
	public function table_heading() {
		$input = func_get_args()[0];
		$text = '';
	
		foreach ($input as $txt=>$val) {
			$text .= str_pad($txt,$val,' ',STR_PAD_RIGHT).' ';
			
			$this->column_widths[] = $val;
		}
		
		$this->e('<yellow>'.$text.'</yellow>');
	}
	
	public function table_columns() {
		$input = func_get_args();
		$text = '';
	
		foreach ($input as $idx=>$val) {
			$text .= str_pad($val,$this->column_widths[$idx],' ',STR_PAD_RIGHT).' ';
		}
	
		$this->e($text);
	}
	
	public function merge(&$input) {
		foreach ($_ENV as $key=>$val) {
			$input = str_replace('{'.strtolower($key).'}',$val,$input);
		}
		
		$input = str_replace(['{rootpath}','{erootpath}','{filename_date}'],[ROOTPATH,ESCROOTPATH,date('Y-m-d-H:ia')],$input);
	
		foreach ((array)$this->_internal as $key=>$val) {
			$input = str_replace('{'.strtolower($key).'}',$val,$input);
		}
	}
		
	public function s($input) {
		return str_replace(' ','\ ',$input);
	}

	public function color($input) {
		// Set up shell colors
		$foreground_colors['off'] = '0;0';
		
		$foreground_colors['black'] = '0;30';
		$foreground_colors['dark_gray'] = '1;30';
		$foreground_colors['blue'] = '0;34';
		$foreground_colors['light_blue'] = '1;34';
		$foreground_colors['green'] = '0;32';
		$foreground_colors['light_green'] = '1;32';
		$foreground_colors['cyan'] = '0;36';
		$foreground_colors['light_cyan'] = '1;36';
		$foreground_colors['red'] = '0;31';
		$foreground_colors['light_red'] = '1;31';
		$foreground_colors['purple'] = '0;35';
		$foreground_colors['light_purple'] = '1;35';
		$foreground_colors['brown'] = '0;33';
		$foreground_colors['yellow'] = '1;33';
		$foreground_colors['light_gray'] = '0;37';
		$foreground_colors['white'] = '1;37';
		$foreground_colors['orange'] = '0;33';
		
		foreach ($foreground_colors as $color=>$console) {
			$input = str_replace('<'.$color.'>',"\033[".$console."m",$input);
			$input = str_replace('</'.$color.'>',"\033[0m",$input);
		}
		
		return $input;
	}
	
	public function get_env() {
		$env_file = '.env';

		$return = false;
	
		if (!file_exists($env_file)) {
			$this->error('Could not locate .env file',false);
		} else {
			$this->heading('Using ENV File '.ROOTPATH.'/.env');
		
			$return = require $env_file;
		}
		
		return $return;
	}
	
	public function get_deploy() {
		$deploy_filename = 'deploy.json';
		
		$return = false;
				
		if (!file_exists($deploy_filename)) {
			$this->error('Could not locate deploy.json file',false);
		} else {
			$build_obj = json_decode(file_get_contents($deploy_filename));
		
			if ($build_obj === null) {
				$this->error('deploy.json malformed',false);
			}
			
			$return = (array)$build_obj;
		}
		
		return $return;
	}

	public function get_hard_actions() {
		$build_obj = json_decode(o()->eof->hard_actions());
	
		if ($build_obj === null) {
			$this->error('hard_actions.json malformed',false);
		}
		
		return (array)$build_obj;
	}

	public function get_descriptions($complete,&$length) {
		$c = [];
		
		foreach ($complete as $key=>$values) {
			foreach ((array)$values as $value) {
				if (substr($value,0,1) == '%') {
					$c[$key] = trim(substr($value,1));
					
					$length = max(strlen($key)+2,$length);
				}
			}
		}
	
		return $c;
	}
	
} /* end class */

class Eof {

	public function env() {
		$md5 = md5(microtime());
		$text = base64_decode('PD9waHANCg0KcmV0dXJuIFsNCgknU0VSVkVSX0VOVklST05NRU5UJz0+J2RldmVsb3BtZW50JywgLyogZGV2ZWxvcG1lbnQsIHRlc3RpbmcsIHByb2R1Y3Rpb24gKi8NCgknU0VSVkVSX0RFQlVHJz0+J2RldmVsb3BtZW50JywgLyogZGV2ZWxvcG1lbnQsIHRlc3RpbmcsIHByb2R1Y3Rpb24gKi8NCgknTE9HX1RIUkVTSE9MRCc9PjAsDQoJJ0FDVElWRSBEQVRBQkFTRSBHUk9VUCc9Pidsb2NhbCcsIC8qIGRlZmF1bHQgZGF0YWJhc2UgZ3JvdXAgKi8NCgknRE9NQUlOJz0+bnVsbCwgLyogdGhlIGRvbWFpbiBvZiB0aGlzIGJveCAqLw0KDQoJJ2RhdGFiYXNlLmRlYnVnJz0+dHJ1ZSwNCg0KCSdjb25maWcuY2FjaGVfZGVmYXVsdCc9PidkdW1teScsDQoJJ2NvbmZpZy5jYWNoZV90dGwnPT4wLA0KCQ0KCSdlbmNyeXB0aW9uX2tleSc9PickbWQ1JywNCl07');
		return str_replace('$md5',$md5,$text);
	}

	public function hard_actions() {
		return base64_decode('ew0KCSJzZWxmLXVwZGF0ZSI6IFsNCgkJIiVVcGRhdGVzIG9yYW5nZS5waGFyIHRvIHRoZSBsYXRlc3QgdmVyc2lvbi4iLA0KCQkiI3NlbGZfdXBkYXRlIg0KCV0sDQoJInNlbGZ1cGRhdGUiOiBbDQoJCSIlVXBkYXRlcyBvcmFuZ2UucGhhciB0byB0aGUgbGF0ZXN0IHZlcnNpb24uIiwNCgkJIiNzZWxmX3VwZGF0ZSINCgldLA0KCSJjcmVhdGUtcHJvamVjdCI6IFsNCgkJIiVDcmVhdGVzIG5ldyBwcm9qZWN0IGZyb20gYSBwYWNrYWdlIGludG8gZ2l2ZW4gZGlyZWN0b3J5LiIsDQoJCSIjY3JlYXRlX3Byb2plY3QiDQoJXQ0KfQ0K');
	}

	public function index_addon() {
		return base64_decode('LyogYWJzb2x1dGUgcGF0aCB0byBwcm9qZWN0cyByb290IGxldmVsIC0gbm90aGluZyBpcyBzdG9yZWQgYmVsb3cgdGhpcyAqLw0KZGVmaW5lKCdST09UUEFUSCcsIHJlYWxwYXRoKF9fRElSX18uJy8uLi8nKSk7DQoNCi8qIC5lbnYgZmlsZSAqLw0KaWYgKCFmaWxlX2V4aXN0cyhST09UUEFUSC4nLy5lbnYnKSkgew0KCWRpZSgnLmVudiBmaWxlIG1pc3NpbmcnKTsNCn0NCg0KLyogYnJpbmcgaW4gdGhlIHN5c3RlbSBfZW52IGZpbGVzICovDQpcJF9FTlYgPSBcJF9FTlYgKyByZXF1aXJlIFJPT1RQQVRILicvLmVudic7DQoNCmRlZmluZSgnRU5WSVJPTk1FTlQnLFwkX0VOVlsnU0VSVkVSX0VOVklST05NRU5UJ10pOw0KDQovKiBhYnNvbHV0ZSBwYXRoIHRvIHByb2plY3Qgb3JhbmdlIGJveCBmb2xkZXI/ICovDQpkZWZpbmUoJ09SQU5HRVBBVEgnLCBST09UUEFUSC4nL3BhY2thZ2VzL3Byb2plY3RvcmFuZ2Vib3gvb3JhbmdlJyk7DQoNCi8qIGFic29sdXRlIHBhdGggdG8gV1dXIGZvbGRlciAqLw0KZGVmaW5lKCdXV1cnLCBkaXJuYW1lKF9fRklMRV9fKSk7CQ0K');
	}

	public function htaccess() {
		return base64_decode('T3B0aW9ucyArRm9sbG93U3ltTGlua3MNCg0KUmV3cml0ZUVuZ2luZSBPbg0KDQpSZXdyaXRlQmFzZSAvDQoNClJld3JpdGVDb25kICV7UkVRVUVTVF9GSUxFTkFNRX0gIS1mDQpSZXdyaXRlQ29uZCAle1JFUVVFU1RfRklMRU5BTUV9ICEtZA0KDQpSZXdyaXRlUnVsZSBeKC4qKSQgaW5kZXgucGhwLyQxIFtMXQ0K');
	}

} /* end class */